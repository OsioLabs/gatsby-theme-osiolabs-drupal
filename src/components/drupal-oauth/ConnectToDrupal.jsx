import React from 'react';
import PropTypes from 'prop-types';
import { OauthSender } from 'react-oauth-flow';

const DrupalConnectLink = ({ url, queryString, title, classes }) => (
  <a href={`${url}${queryString}`} className={classes}>
    {title}
  </a>
);

/**
 * Create a link that can be used for registration.
 *
 * This takes the authorize URL generated by OauthSender, extracts the query
 * string from it, and then uses that to generate a new URL for /user/register
 * with an ?destination parameter that will redirect to the authorize URL with
 * the appropriate query string after the registration process is complete.
 *
 * This takes advantage of some Drupalisms like ?destination=.
 */
const DrupalRegisterLink = ({ url, queryString, title, drupalRoot, classes }) => {
  let query = url.split('?')[1];
  query = encodeURIComponent(`?${query}`);
  return (
    <a
      href={`${drupalRoot}/user/register?destination=/oauth/authorize${query}${queryString}`}
      className={classes}
    >
      {title}
    </a>
  );
};

const ConnectToDrupal = props => {
  // Normalize the redirect URI so that it always contains a trailing slash.
  // Gatsby likes to redirect example.com/asdf?code= to example.com/asdf/?code=
  // and if the URL that we send in the original request doesn't match the one
  // we use to verify the ?code= param there will be problems.
  let redirectUri = props.redirectUri;
  redirectUri += redirectUri.endsWith('/') ? '' : '/';

  return (
    <OauthSender
      authorizeUrl={props.drupalOauthClient.config.authorize_url}
      clientId={props.drupalOauthClient.config.client_id}
      redirectUri={redirectUri}
      state={{}}
      render={({ url }) => {
        if (props.useRegistrationLink === true) {
          return (
            <DrupalRegisterLink
              url={url}
              queryString={props.queryString}
              title={props.title}
              classes={props.classes}
              drupalRoot={props.drupalOauthClient.config.drupal_root}
            />
          );
        }
        return (
          <DrupalConnectLink
            url={url}
            queryString={props.queryString}
            title={props.title}
            classes={props.classes}
          />
        );
      }}
    />
  );
};

ConnectToDrupal.propTypes = {
  // An instance of the DrupalOauth class, used to obtain configuration.
  drupalOauthClient: PropTypes.object.isRequired,
  // The URL to redirect to after obtaining a grant from the server.
  redirectUri: PropTypes.string.isRequired,
  // The text to use for the link.
  title: PropTypes.string.isRequired,
  // If set to true use a link that will allow someone to register a new
  // account, and then authorize the grant.
  useRegistrationLink: PropTypes.bool,
  // Additional query string parameters to add to the link.
  queryString: PropTypes.string,
  // A list of class names to apply to the a element.
  classes: PropTypes.string,
};

ConnectToDrupal.defaultProps = {
  useRegistrationLink: false,
  queryString: '',
  classes: '',
};

export default ConnectToDrupal;
